"use strict";(self.webpackChunkzealot_new_docs=self.webpackChunkzealot_new_docs||[]).push([[5920],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),p=c(n),g=i,f=p["".concat(s,".").concat(g)]||p[g]||u[g]||r;return n?a.createElement(f,l(l({ref:t},d),{},{components:n})):a.createElement(f,l({ref:t},d))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=g;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[p]="string"==typeof e?e:i,l[1]=o;for(var c=2;c<r;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},5808:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var a=n(7462),i=(n(7294),n(3905));const r={},l="Best Practices",o={unversionedId:"user-guide/best_practices",id:"version-5.0.0/user-guide/best_practices",title:"Best Practices",description:"Workflow",source:"@site/versioned_docs/version-5.0.0/user-guide/best_practices.md",sourceDirName:"user-guide",slug:"/user-guide/best_practices",permalink:"/docs/user-guide/best_practices",draft:!1,editUrl:"https://github.com/tryzealot/docs/tree/main/versioned_docs/version-5.0.0/user-guide/best_practices.md",tags:[],version:"5.0.0",frontMatter:{},sidebar:"userGuide",previous:{title:"Database Analytics",permalink:"/docs/user-guide/administrator/monitoring/database-analytics"},next:{title:"Change Log",permalink:"/docs/user-guide/changelog"}},s={},c=[{value:"Workflow",id:"workflow",level:2},{value:"iOS and Android Apps",id:"ios-and-android-apps",level:3},{value:"Zealot SDKs",id:"zealot-sdks",level:4},{value:"Install fastlane",id:"install-fastlane",level:4},{value:"CI/CD Service",id:"cicd-service",level:3},{value:"Zealot Service",id:"zealot-service",level:3}],d={toc:c},p="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"best-practices"},"Best Practices"),(0,i.kt)("h2",{id:"workflow"},"Workflow"),(0,i.kt)("h3",{id:"ios-and-android-apps"},"iOS and Android Apps"),(0,i.kt)("h4",{id:"zealot-sdks"},"Zealot SDKs"),(0,i.kt)("p",null,"Integration with the Zealot SDK allows non-client development to automatically trigger new version checks, view change logs, and install functionality."),(0,i.kt)("h4",{id:"install-fastlane"},"Install fastlane"),(0,i.kt)("p",null,"In addition to the fastlane-plugin-zealot plugin, which is required to upload applications and debug files,\nit is highly recommended to install the following plug-ins in addition to fastlane."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/icyleaf/fastlane-plugin-ci_changelog"},"ci_changelog")," | Support for multiple CI systems to automatically generate change history"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/icyleaf/fastlane-plugin-update_jenkins_build"},"update_jenkins_build")," | Automatically Update Jenkins Build Description"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/icyleaf/fastlane-plugin-humanable_build_number"},"humanable_build_number")," | Generate a build version number that is recognizable to development"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/icyleaf/fastlane-plugin-app_info"},"app_info")," | View metadata about the application after successful packaging"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/icyleaf/fastlane-plugin-ram_disk"},"ram_disk")," | Create in-memory virtual disks, mainly used to improve App build speed (consider if memory is large)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/icyleaf/fastlane-plugin-debug_file"},"debug_file")," | Automated search for iOS/macOS dSYM or Android Proguard (obfuscation) and packaging of Zip files")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# Build and upload ipa to zealot service\nlane :upload_app do\n  # Building the package file, using gym in iOS, gradle in Android\n  gym\n\n  # Uploading to Zealot\n  zealot(\n    endpoint: '...',\n    token: '...',\n    channel_key: '...'\n  )\n\n  # Uploading dSYM file to Zealot\n  zealot_debug_file(\n    scheme: 'AppName'\n  )\nend\n\n# Build android package file and generate progguard then upload to zealot service\nlane :upload_debug_file do\n  # Building the package file, using gym in iOS, gradle in Android\n  gradle\n\n  #  Automated search for iOS/macOS dSYM or Android Proguard (obfuscation) and packaging of Zip files\n  debug_file\n\n  # Uploading to Zealot\n  zealot(\n    endpoint: '...',\n    token: '...',\n    channel_key: '...'\n  )\n\n  # Uploading Proguard file to Zealot\n  zealot_debug_file(\n    build_type: 'release',\n    flavor: 'googleplay'\n  )\nend\n")),(0,i.kt)("h3",{id:"cicd-service"},"CI/CD Service"),(0,i.kt)("p",null,"For example, Jenkins, configure the project, set up the git hook to trigger packaging, nothing to say"),(0,i.kt)("h3",{id:"zealot-service"},"Zealot Service"),(0,i.kt)("p",null,"In addition to managing each uploaded application and debug file, each time an uploaded application is received,\na configured web hook is triggered to send a notification to the third-party service that a new version has been received,\nand for mobile clients that integrate with the Zealot SDK, they will receive a new version installation alert each time they open the app for the first time."))}u.isMDXComponent=!0}}]);