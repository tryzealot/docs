"use strict";(self.webpackChunkzealot_new_docs=self.webpackChunkzealot_new_docs||[]).push([[9516],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>g});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(r),m=a,g=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return r?n.createElement(g,o(o({ref:t},c),{},{components:r})):n.createElement(g,o({ref:t},c))}));function g(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=r[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},2482:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>d});var n=r(7462),a=(r(7294),r(3905)),i=r(941),o=r(4996);const s={sidebar_label:"Apple Team"},l="Apple Team (Developer)",p={unversionedId:"user-guide/administrator/apple-team",id:"version-4.x/user-guide/administrator/apple-team",title:"Apple Team (Developer)",description:"One of the biggest challenges in distributing Ad-Hoc signed applications for iOS is the need to",source:"@site/versioned_docs/version-4.x/user-guide/administrator/apple-team.mdx",sourceDirName:"user-guide/administrator",slug:"/user-guide/administrator/apple-team",permalink:"/docs/user-guide/administrator/apple-team",draft:!1,editUrl:"https://github.com/tryzealot/docs/tree/main/versioned_docs/version-4.x/user-guide/administrator/apple-team.mdx",tags:[],version:"4.x",frontMatter:{sidebar_label:"Apple Team"},sidebar:"userGuide",previous:{title:"Administrator",permalink:"/docs/category/administrator"},next:{title:"Permissions",permalink:"/docs/user-guide/administrator/permissions"}},c={},d=[],u={toc:d},m="wrapper";function g(e){let{components:t,...r}=e;return(0,a.kt)(m,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"apple-team-developer"},"Apple Team (Developer)"),(0,a.kt)("p",null,"One of the biggest challenges in distributing Ad-Hoc signed applications for iOS is the need to\nconvey what a UDID is and how to obtain it to a large number of people who may not understand\nthese concepts. After obtaining the UDID, it then needs to be provided to the developer,\nwho must then re-sign the certificate, package it, and upload it for installation."),(0,a.kt)("p",null,"Zealot can automatically obtain the UDID of Ad-Hoc applications.\nAlthough the UDIDs are usually accompanied by device names during registration,\nsometimes it is difficult to understand which device belongs to whom when presented with a\nlist of UDIDs. To solve this problem, Zealot has tried several solutions. In the early days,\nthe fastlane plugin zealotsyncdevice was used to synchronize the names and models of testing devices.\nWith the release of the AppStoreConnect API, Zealot can now completely automate the process,\ngreatly simplifying the registration process and allowing testing applications to display\nrecognizable and friendly device names."),(0,a.kt)(i.Z,{alt:"Register processing",sources:{light:(0,o.Z)("/img/apple-team/flows-light.png"),dark:(0,o.Z)("/img/apple-team/flows-dark.png")},mdxType:"ThemedImage"}),(0,a.kt)("p",null,"Although providing the UDID of a device confirms which applications can be installed,\nproviding a feature to register a testing device that has not been registered with any application\nwould greatly improve the efficiency of the team. This is the role of the Apple Developer feature."),(0,a.kt)(i.Z,{alt:"Apple deveoper detail preview",sources:{light:(0,o.Z)("/img/apple-team/apple-team-detail-light.png"),dark:(0,o.Z)("/img/apple-team/apple-team-detail-dark.png")},mdxType:"ThemedImage"}),(0,a.kt)("p",null,"The initial feature introduction: ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/tryzealot/zealot/issues/723"},"https://github.com/tryzealot/zealot/issues/723"),"."))}g.isMDXComponent=!0}}]);